# --------------------------------------------------------------------------------------
# ROOT key is "nodes", a mapping of {node_name:str -> node_params:dict}
nodes:
  # ------------------------------------------------------------------------------------
  # GENERATOR NODE, creates several ToyDatasets as input
  # ------------------------------------------------------------------------------------
  
  # ↓ this is the node name, has to be unique
  generator:
    # ↓ this keyword indicates that the node will be repeated several times based on 
    # ↓ values in the 'items' field
    foreach:
      # ↓ 'items' field is a list of values to be used in the 'foreach' loop
      items: $var(params.flags)
      # ↓ 'do' field contains the real node definition with placeholders for the 
      # ↓ elements that will be replaced by the 'foreach' loop (e.e. $iter(item) will
      # ↓ be replaced by the value of 'item' in the 'foreach' loop)
      do:
        command: pipelime datasets generate_toy_dataset
        outputs:
          output_folder: $var(params.generated_output_folder)/$iter(item)
        args:
          suffix: _$iter(item)
          size: $var(params.generated_dataset_size)
        outputs_schema:
          output_folder: ciao
  # ------------------------------------------------------------------------------------
  # FILTER_KEYS NODE, filter some keys for each sample, for each dataset
  # ------------------------------------------------------------------------------------
  filter_keys:
    foreach:
      items: $var(params.flags)
      do:
        command: pipelime underfolder filter_keys
        inputs:
          input_folder: $var(params.generated_output_folder)/$iter(item)
        outputs:
          output_folder: $var(params.generated_output_folder)/$iter(item)_filtered
        args:
          keys:
            foreach:
              items: $var(params.filter_keys)
              do: $argiter(item)_$iter(item)
  # ------------------------------------------------------------------------------------
  # SUBSAMPLE NODE, reduce size of each dataset
  # ------------------------------------------------------------------------------------
  subsample:
    foreach:
      items: $var(params.flags)
      do:
        command: pipelime underfolder subsample
        inputs:
          input_folder: $var(params.generated_output_folder)/$iter(item)_filtered
        outputs:
          output_folder: $var(params.generated_output_folder)/$iter(item)_subsampled
        args:
          factor: 0.5
  # ------------------------------------------------------------------------------------
  # REMAP_KEYS NODE, rename keys of each dataset into a common naming scheme
  # ------------------------------------------------------------------------------------
  remap_keys:
    foreach:
      items: $var(params.flags)
      do:
        command: pipelime underfolder remap_keys
        inputs:
          input_folder: $var(params.generated_output_folder)/$iter(item)_subsampled
        outputs:
          output_folder: $var(params.generated_output_folder)/$iter(item)_remapped
        args:
          keys@0:
            foreach:
              items: $var(params.filter_keys)
              do: $argiter(item)_$iter(item)
          keys@1:
            foreach:
              items: $var(params.filter_keys)
              do: $argiter(item)
          remove: {}
  # ------------------------------------------------------------------------------------
  # DETECTION NODE, launch custom detection node on each input dataset
  # ------------------------------------------------------------------------------------
  detection:
    # ↓ this is the base command to be executed
    command: python fake_detector.py
    # ↓ this is mapping of inputs arguments {arg_name:str -> values:str}
    inputs:
      input_folders:
        # ↓ this is a for each for arguments itself, it is a list of values to be used
        # ↓ in the 'foreach' loop with the same behavior as the 'foreach' keyword used
        # ↓ above for nodes
        foreach:
          items: $var(params.flags)
          do: $var(params.generated_output_folder)/$argiter(item)_remapped
    # ↓ this is mapping of outputs arguments {arg_name:str -> values:str}
    outputs:
      output_folders:
        foreach:
          items: $var(params.flags)
          do: $var(params.generated_output_folder)/$argiter(item)_detected
    # ↓ this is mapping of generic arguments {arg_name:str -> values:str}     
    args:
      fake_time: 0.01
  # ------------------------------------------------------------------------------------
  # SUMMATION NODE, sum each dataset into a single dataset
  # ------------------------------------------------------------------------------------
  summation:
    command: pipelime underfolder sum
    inputs:
      input_folders: 
        foreach:
          items: $var(params.flags)
          do: $var(params.generated_output_folder)/$argiter(item)_detected
    outputs:
      output_folder: $var(params.summed_folder)
  # ------------------------------------------------------------------------------------
  # SPLIT NODE, split datasets into train, validation and test
  # ------------------------------------------------------------------------------------
  split:
    command: pipelime underfolder split
    args:
      splits:
        foreach:
          items: $var(params.splits)
          do: $argiter(item.p)
    inputs:
      input_folder: $var(params.summed_folder)
    outputs:
      output_folders:
        foreach:
          items: $var(params.splits)
          do: $var(params.output_folder)/$argiter(item.name)
  # ------------------------------------------------------------------------------------
  # SHUFFLE NODE, useless shuffle after split
  # ------------------------------------------------------------------------------------
  shuffle:
    foreach:
      items: $var(params.splits)
      do:
        command: pipelime underfolder shuffle
        inputs:
          input_folder: $var(params.output_folder)/$iter(item.name)
        outputs:
          output_folder: $var(params.output_folder)/$iter(item.name)_shuffled
        args:
          seed: 10


